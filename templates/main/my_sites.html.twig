{% extends 'base.html.twig' %}

{% block title %}Mes Sites Web Générés - Web Forge{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.css">
    <style>
        .CodeMirror {
            height: 100%;
            font-family: 'Fira Code', monospace;
        }
        .file-btn.active {
            background-color: rgba(59, 130, 246, 0.1);
            border-left: 2px solid #3b82f6;
        }
        .dark .file-btn.active {
            background-color: rgba(59, 130, 246, 0.2);
        }
    </style>
{% endblock %}

{% block body %}
<div class="min-h-screen transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
        {% if not app.user.isSubscribed is defined or not app.user.isSubscribed %}
            <div class="max-w-3xl mx-auto mb-8 bg-yellow-50 dark:bg-yellow-900 border-l-4 border-yellow-400 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-yellow-700 dark:text-yellow-200">
                            Version gratuite limitée à 3 générations. <a href="{{ path('app_subscription') }}" class="font-medium underline hover:text-yellow-600 dark:hover:text-yellow-300">Passez à la version premium</a> pour des générations illimitées.
                        </p>
                    </div>
                </div>
            </div>
        {% endif %}
        {# <div id="error-alert" class="hidden max-w-3xl mx-auto mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Erreur!</strong>
            <span id="error-message" class="block sm:inline"></span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
                <svg class="fill-current h-6 w-6 text-red-500" role="button" id="close-error" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <title>Fermer</title>
                    <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/>
                </svg>
            </span>
        </div> #}
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Mes Sites Web</h1>
            <p class="text-lg text-gray-600 dark:text-gray-300">Gérez vos sites web générés par Web Forge AI</p>
            <a href="{{ path('app_home') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Générer un nouveau site</a>
        </div>

        {% set domain_name_widget = form_widget(domain_form.domainName) %}
        {% set extension_widget = form_widget(domain_form.extension) %}

        {% if prompts is empty %}
            <div class="text-center py-12">
                <p class="text-gray-600 dark:text-gray-300">Vous n'avez pas encore généré de sites web.</p>
                <a href="{{ path('app_home') }}" class="inline-block mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Commencer à générer</a>
            </div>
        {% else %}
            {% for prompt in prompts %}
                {% if prompt.status == 'completed' or prompt.status == 'error' %}
                    <div class="max-w-5xl mx-auto mb-12 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 {% if prompt.status == 'error' %}border-2 border-red-500{% endif %}">
                        <div class="mb-6">
                            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Site #{{ prompt.id }}</h2>
                            <div class="bg-gray-100 dark:bg-gray-700 rounded p-4 mb-4">
                                <h3 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">Prompt :</h3>
                                <p class="text-gray-600 dark:text-gray-400">{{ prompt.content }}</p>
                                {% if prompt.status == 'error' %}
                                    <div class="mt-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 p-4">
                                        <div class="flex">
                                            <div class="flex-shrink-0">
                                                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                                                </svg>
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-sm text-red-700 dark:text-red-200">
                                                    Une erreur est survenue : {{ prompt.error }}
                                                </p>
                                                <p class="mt-2 text-sm text-red-600 dark:text-red-300">
                                                    La restauration automatique de la dernière version stable est en cours...
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}
                            </div>
                        </div>

                        <div class="mb-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Explorateur de fichiers</h3>
                                <div class="file-explorer overflow-y-auto h-64" data-prompt-id="{{ prompt.id }}">
                                    <div class="file-tree">
                                        {% set fileTypes = {
                                            'html.twig': 'Template',
                                            'css': 'Style',
                                            'js': 'Script',
                                            'json': 'JSON',
                                            'lock': 'LOCK',
                                            'env': 'Environnement',
                                            'md': 'Documentation',
                                            'yaml': 'YAML',
                                            'php': 'PHP'
                                        } %}

                                        {% for type, label in fileTypes %}
                                            {% set typeFiles = [] %}
                                            {% for template in templates %}
                                                {% if template.path ends with type and template.promptId == prompt.id %}
                                                    {% set typeFiles = typeFiles|merge([template]) %}
                                                {% endif %}
                                            {% endfor %}

                                            {% if typeFiles is not empty %}
                                                <div class="file-category mb-4">
                                                    <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                                                        <span class="mr-2">
                                                            {% if type == 'html.twig' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"></path></svg>
                                                            {% elseif type == 'css' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path></svg>
                                                            {% elseif type == 'js' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"></path></svg>
                                                            {% else %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>
                                                            {% endif %}
                                                        </span>
                                                        {{ label }}s
                                                    </h4>
                                                    <ul class="pl-4 space-y-1">
                                                        {% for file in typeFiles %}
                                                            <li>
                                                                <button class="file-btn text-left w-full px-2 py-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center group" 
                                                                        data-prompt-id="{{ prompt.id }}" 
                                                                        data-file-path="{{ file.path }}">
                                                                    <span class="flex-grow text-white truncate">{{ file.name }}</span>
                                                                    <span class="hidden group-hover:inline-flex ml-2 text-gray-500 dark:text-gray-400">
                                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                                        </svg>
                                                                    </span>
                                                                </button>
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="flex flex-col gap-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Code généré</h3>
                                <div class="flex justify-end mb-4">
                                    <button class="editor-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="editor-container h-[600px] relative" data-prompt-id="{{ prompt.id }}"></div>
                                <div class="flex space-x-4 mt-4">
                                {% if not app.user.isSubscribed %}
                                    <div class="w-full bg-yellow-300 dark:bg-yellow-900 rounded-lg p-4 text-center">
                                        <p class="text-yellow-700 dark:text-yellow-300 mb-3">Pour télécharger, déployer et modifier vos sites, abonnez-vous à Web Forge !</p>
                                        <a href="{{ path('app_subscription') }}" class="inline-block bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Découvrir l'abonnement</a>
                                    </div>
                                {% else %}
                                    <button class="download-btn bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                        Télécharger le site
                                    </button>
                                    <div class="flex flex-col space-y-2">
                                        {% if prompt.deployed %}
                                            <div class="flex space-x-4">
                                                <div class="text-green-600 dark:text-green-400 font-semibold py-2 px-4">
                                                    Site publié sur {{ prompt.domainName }}
                                                </div>
                                                <form action="{{ path('app_deploy_site', {'promptId': prompt.id}) }}" method="post" class="inline">
                                                    <button type="submit" class="bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded transition duration-200">
                                                        Redéployer le site
                                                    </button>
                                                </form>
                                            </div>
                                        {% else %}
                                            {{ form_start(domain_form, {'action': path('payDomain', {'type': 'site', 'id': prompt.id}), 'attr': {'class': 'space-y-2'}}) }}
                                                <div class="flex space-x-2">
                                                    {{ domain_name_widget|raw }}
                                                    {{ extension_widget|raw }}
                                                </div>
                                                <div>
                                                    <button type="submit" id="publish-button-{{ prompt.id }}" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200">
                                                    Publier le site
                                                    </button>
                                        {% endif %}
                                                    <script>
                                                        document.addEventListener('DOMContentLoaded', function() {
                                                            const domainInput = document.querySelector('#{{ domain_form.domainName.vars.id }}');
                                                            const extensionSelect = document.querySelector('#{{ domain_form.extension.vars.id }}');
                                                            const publishButton = document.querySelector('#publish-button-{{ prompt.id }}');

                                                            function updateButtonText() {
                                                                const domain = domainInput.value;
                                                                const extension = extensionSelect.value;
                                                                if (domain) {
                                                                    publishButton.textContent = `Publier sur ${domain}${extension}`;
                                                                } else {
                                                                    publishButton.textContent = 'Publier le site';
                                                                }
                                                            }

                                                            domainInput.addEventListener('input', updateButtonText);
                                                            extensionSelect.addEventListener('change', updateButtonText);
                                                        });
                                                    </script>
                                                </div>
                                            {{ form_end(domain_form) }}
                                        {% endif %}
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Aperçu en direct</h3>
                                    <button class="preview-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="preview-container h-[500px] w-full bg-white border rounded-lg overflow-hidden relative" data-prompt-id="{{ prompt.id }}">
                                    <iframe class="preview-frame w-full h-full" data-prompt-id="{{ prompt.id }}" src="{{ path('app_preview_template', {'id': prompt.id}) }}"></iframe>
                                </div>
                                <div class="mt-4">
                                    <div class="modification-section mb-6">
                                        <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Modifier le site</h4>
                                        {% if not app.user.isSubscribed %}
                                            <div class="bg-yellow-300 dark:bg-yellow-900 rounded-lg p-4 text-center">
                                                <p class="text-yellow-700 dark:text-yellow-300 mb-3">La modification de sites est réservée aux abonnés Web Forge.</p>
                                                <a href="{{ path('app_subscription') }}" class="inline-block bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">S'abonner maintenant</a>
                                            </div>
                                        {% else %}
                                            <textarea class="modification-prompt w-full h-24 p-2 border rounded-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Décrivez les modifications que vous souhaitez apporter au site..."></textarea>
                                            <button class="modify-btn mt-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                                Appliquer les modifications
                                            </button>
                                        {% endif %}
                                    </div>
                                    <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Historique des versions</h4>
                                    <div class="versions-list space-y-2 mb-4 max-h-64 overflow-y-auto">
                                    {% if prompt.allVersions is defined and prompt.allVersions is not empty %}
                                        {% for version in prompt.allVersions %}
                                            <div class="version-item p-3 bg-gray-50 dark:bg-gray-700 rounded-lg mb-2 {% if version.status == 'archived' %}opacity-75{% endif %}">
                                                <div class="flex justify-between items-start mb-2">
                                                    <div class="version-header">
                                                        <span class="font-medium text-white text-lg">Version {{ version.version }}</span>
                                                        <span class="text-sm text-gray-500 dark:text-gray-400 ml-2">{{ version.createdAt|date('d/m/Y H:i') }}</span>
                                                        {% if version.status == 'archived' %}
                                                            <span class="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-xs rounded">Archivée</span>
                                                        {% elseif version.status == 'completed' %}
                                                            <span class="ml-2 px-2 py-1 bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-200 text-xs rounded">Version actuelle</span>
                                                        {% endif %}
                                                    </div>
                                                    {% if version.status == 'archived' and version.id != prompt.id %}
                                                        <button type="button" class="restore-version-btn bg-blue-100 hover:bg-blue-200 dark:bg-blue-800 dark:hover:bg-blue-700 text-blue-700 dark:text-blue-200 px-3 py-1 rounded-full text-sm transition-colors duration-200" data-version-id="{{ version.id }}">
                                                            Restaurer cette version
                                                        </button>
                                                    {% endif %}
                                                </div>

                                                {% if version.modificationRequest %}
                                                    <div class="version-content mt-2 p-2 bg-white dark:bg-gray-600 rounded">
                                                        <p class="text-sm text-gray-600 dark:text-gray-300">
                                                            <span class="font-medium">Modifications apportées :</span><br>
                                                            {{ version.modificationRequest }}
                                                        </p>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        {% endfor %}
                                    {% else %}
                                        <p class="text-gray-500 dark:text-gray-400 text-sm">Aucune version disponible</p>
                                    {% endif %}
                                </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% elseif prompt.status == 'error' %}
                    <div class="max-w-5xl mx-auto mb-12 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <div class="mb-6">
                            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Site #{{ prompt.id }}</h2>
                            <div class="bg-gray-100 dark:bg-gray-700 rounded p-4 mb-4">
                                <h3 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">Prompt :</h3>
                                <p class="text-gray-600 dark:text-gray-400">{{ prompt.content }}</p>
                                {% if prompt.status == 'error' %}
                                    <div class="mt-4 bg-red-100 dark:bg-red-900 border-l-4 border-red-500 p-4">
                                        <div class="flex">
                                            <div class="flex-shrink-0">
                                                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                                                </svg>
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-sm text-red-700 dark:text-red-200">
                                                    Une erreur est survenue : {{ prompt.error }}
                                                </p>
                                                <p class="mt-2 text-sm text-red-600 dark:text-red-300">
                                                    La restauration automatique de la dernière version stable est en cours...
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}
                            </div>
                        </div>

                        <div class="mb-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Explorateur de fichiers</h3>
                                <div class="file-explorer overflow-y-auto h-64" data-prompt-id="{{ prompt.id }}">
                                    <div class="file-tree">
                                        {% set fileTypes = {
                                            'html.twig': 'Template',
                                            'css': 'Style',
                                            'js': 'Script',
                                            'json': 'JSON',
                                            'lock': 'LOCK',
                                            'env': 'Environnement',
                                            'md': 'Documentation',
                                            'yaml': 'YAML',
                                            'php': 'PHP'
                                        } %}

                                        {% for type, label in fileTypes %}
                                            {% set typeFiles = [] %}
                                            {% for template in templates %}
                                                {% if template.path ends with type and template.promptId == prompt.id %}
                                                    {% set typeFiles = typeFiles|merge([template]) %}
                                                {% endif %}
                                            {% endfor %}

                                            {% if typeFiles is not empty %}
                                                <div class="file-category mb-4">
                                                    <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                                                        <span class="mr-2">
                                                            {% if type == 'html.twig' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"></path></svg>
                                                            {% elseif type == 'css' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path></svg>
                                                            {% elseif type == 'js' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"></path></svg>
                                                            {% else %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>
                                                            {% endif %}
                                                        </span>
                                                        {{ label }}s
                                                    </h4>
                                                    <ul class="pl-4 space-y-1">
                                                        {% for file in typeFiles %}
                                                            <li>
                                                                <button class="file-btn text-left w-full px-2 py-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center group" 
                                                                        data-prompt-id="{{ prompt.id }}" 
                                                                        data-file-path="{{ file.path }}"
                                                                        
                                                                        >
                                                                    <span class="flex-grow text-white truncate">{{ file.name }}</span>
                                                                    <span class="hidden group-hover:inline-flex ml-2 text-gray-500 dark:text-gray-400">
                                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                                        </svg>
                                                                    </span>
                                                                </button>
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="flex flex-col gap-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Code généré</h3>
                                <div class="flex justify-end mb-4">
                                    <button class="editor-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="editor-container h-[600px] relative" data-prompt-id="{{ prompt.id }}"></div>
                                <div class="flex space-x-4 mt-4">
                                    <button class="download-btn bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                        Télécharger le site
                                    </button>
                                    <div class="flex flex-col space-y-2">
                                        <div class="flex space-x-2">
                                            <input type="text" class="custom-domain-input flex-grow px-4 py-2 border rounded-l-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Votre nom de domaine">
                                            <select class="domain-extension px-4 py-2 border rounded-r-lg bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600">
                                                <option value=".com">.com</option>
                                                <option value=".fr">.fr</option>
                                                <option value=".org">.org</option>
                                                <option value=".net">.net</option>
                                                <option value=".eu">.eu</option>
                                            </select>
                                        </div>
                                        <button class="deploy-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                            Publier le site
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Aperçu en direct</h3>
                                    <button class="preview-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="preview-container h-[500px] w-full bg-white border rounded-lg overflow-hidden relative" data-prompt-id="{{ prompt.id }}">
                                    <iframe class="preview-frame w-full h-full" data-prompt-id="{{ prompt.id }}" src="{{ path('app_preview_template', {'id': prompt.id}) }}"></iframe>
                                </div>
                                <div class="mt-4">
                                    <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Historique des versions</h4>
                                    <div class="versions-list space-y-2 mb-4 max-h-64 overflow-y-auto">
                                        {% set allVersions = [prompt] %}
                                        {% set currentPrompt = prompt %}
                                        {% if currentPrompt.originalPrompt is not null %}
                                            {% set originalPrompt = currentPrompt.originalPrompt %}
                                            {% set allVersions = allVersions|merge([originalPrompt]) %}
                                            {% if originalPrompt.originalPrompt is not null %}
                                                {% set allVersions = allVersions|merge([originalPrompt.originalPrompt]) %}
                                            {% endif %}
                                        {% endif %}

                                        {% for version in allVersions|reverse %}
                                            <div class="version-item p-3 bg-gray-50 dark:bg-gray-700 rounded-lg mb-2 {% if version.status == 'archived' %}opacity-75{% endif %}">
                                                <div class="flex justify-between items-start mb-2">
                                                    <div class="version-header">
                                                        <span class="font-medium text-lg">Version {{ version.version }}</span>
                                                        <span class="text-sm text-gray-500 dark:text-gray-400 ml-2">{{ version.createdAt|date('d/m/Y H:i') }}</span>
                                                        {% if version.status == 'archived' %}
                                                            <span class="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-xs rounded">Archivée</span>
                                                        {% elseif version.status == 'completed' %}
                                                            <span class="ml-2 px-2 py-1 bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-200 text-xs rounded">Version actuelle</span>
                                                        {% endif %}
                                                    </div>
                                                    {% if version.status == 'archived' and version.id != prompt.id %}
                                                        <button type="button" class="restore-version-btn bg-blue-100 hover:bg-blue-200 dark:bg-blue-800 dark:hover:bg-blue-700 text-blue-700 dark:text-blue-200 px-3 py-1 rounded-full text-sm transition-colors duration-200" data-version-id="{{ version.id }}">
                                                            Restaurer cette version
                                                        </button>
                                                    {% endif %}
                                                </div>
                                                
                                                {% if version.modificationRequest %}
                                                    <div class="version-content mt-2 p-2 bg-white dark:bg-gray-600 rounded">
                                                        <p class="text-sm text-gray-600 dark:text-gray-300">
                                                            <span class="font-medium">Modifications apportées :</span><br>
                                                            {{ version.modificationRequest }}
                                                        </p>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        {% else %}
                                            <p class="text-gray-500 dark:text-gray-400 text-sm">Aucune version disponible</p>
                                        {% endfor %}
                                    </div>
                                    <div class="modification-section">
                                        <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Modifier le site</h4>
                                        <textarea class="modification-prompt w-full h-24 p-2 border rounded-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Décrivez les modifications que vous souhaitez apporter au site..."></textarea>
                                        <button class="modify-btn mt-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                            Appliquer les modifications
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {# <div id="error-alert" class="max-w-3xl mx-auto mt-5 mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                            <strong class="font-bold">Erreur!</strong>
                            <span id="error-message" class="block sm:inline">Veuillez réessayer</span>
                        </div> #}
                    </div>
                {% endif %}
            {% endfor %}
        {% endif %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <style>
        .tab-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            transition: all 0.2s;
        }
        
        .tab-btn.active {
            background-color: #4F46E5;
            color: white;
        }
        
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 9999;
            background: white;
            padding: 2rem;
        }

        .dark .fullscreen {
            background: #1F2937;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/markdown/markdown.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldcode.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Gestionnaire pour les boutons de fichiers
            document.querySelectorAll('.file-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const promptId = this.dataset.promptId;
                    const filePath = this.dataset.filePath;
                    const previewFrame = document.querySelector(`.preview-frame[data-prompt-id="${promptId}"]`);

                    // Retirer la classe active de tous les boutons
                    document.querySelectorAll('.file-btn').forEach(btn => btn.classList.remove('active'));
                    // Ajouter la classe active au bouton cliqué
                    this.classList.add('active');

                    // Faire la requête AJAX pour obtenir le contenu du template
                    fetch(`/preview-template/${promptId}?file=${encodeURIComponent(filePath)}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.error || 'Erreur lors du chargement du template');
                        }
                        // Mettre à jour l'iframe avec le nouveau contenu
                        const iframe = previewFrame;
                        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                        iframeDoc.open();
                        iframeDoc.write(data.content);
                        iframeDoc.close();
                    })
                    .catch(error => {
                        const errorAlert = document.getElementById('error-alert');
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = error.message;
                        errorAlert.classList.remove('hidden');
                        setTimeout(() => {
                            errorAlert.classList.add('hidden');
                        }, 5000); // Cache l'erreur après 5 secondes
                    });
                });
            });

            // Gestionnaire pour fermer l'alerte d'erreur
            document.getElementById('close-error')?.addEventListener('click', function() {
                document.getElementById('error-alert').classList.add('hidden');
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/brace-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/xml-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/markdown-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/comment-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="/js/file-explorer.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
        // --- Variables Globales et Utilitaires ---
        const editors = {}; // Stocke les instances de CodeMirror par promptId
        const currentFiles = {}; // Stocke le contenu des fichiers par promptId
        const ERROR_DISPLAY_DURATION = 5000; // Durée d'affichage des erreurs en ms

        /**
         * Affiche un message d'erreur.
         * @param {string} message Le message d'erreur à afficher.
         */
        function showError(message) {
            const errorAlert = document.getElementById('error-alert');
            const errorMessage = document.getElementById('error-message');

            if (errorAlert && errorMessage) {
                errorMessage.textContent = message;
                errorAlert.classList.remove('hidden');

                setTimeout(() => {
                    errorAlert.classList.add('hidden');
                }, ERROR_DISPLAY_DURATION);
            } else {
                console.error("Élément d'erreur introuvable. Message:", message);
            }
        }

        // Ferme l'alerte d'erreur.  Utilisation de optional chaining (?.) pour éviter les erreurs si l'élément n'existe pas.
        document.getElementById('close-error')?.addEventListener('click', () => {
            document.getElementById('error-alert')?.classList.add('hidden');
        });

        // --- Gestionnaire de fichiers (Chargement dans l'éditeur) ---
        document.querySelectorAll('.file-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const promptId = this.dataset.promptId;
                const filePath = this.dataset.filePath;

                try {
                    const response = await fetch(`/api/file-content/${promptId}?path=${encodeURIComponent(filePath)}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status} - ${response.statusText}`); // Amélioration du message d'erreur
                    }

                    const data = await response.json();

                    if (data.success) {
                        const content = data.content;
                        let mode;

                        if (filePath.endsWith('.twig')) {
                            mode = 'twig';
                            updatePreview(promptId, content);
                        } else if (filePath.endsWith('.css')) {
                            mode = 'css';
                        } else if (filePath.endsWith('.js')) {
                            mode = 'javascript';
                        } else {
                            mode = 'xml'; // Default to XML
                        }

                        setEditorContent(promptId, content, mode);
                        setActiveTab(promptId, mode);


                    } else {
                        throw new Error(data.message || 'Erreur lors du chargement du fichier.');
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement du fichier:', error);
                    showError(`Erreur lors du chargement du fichier: ${error.message}`); // Affichage de l'erreur à l'utilisateur
                }
            });
        });

        /**
         * Définit le contenu de l'éditeur et son mode.
         * @param {string} promptId L'identifiant du prompt.
         * @param {string} content Le contenu à afficher dans l'éditeur.
         * @param {string} mode Le mode de l'éditeur (twig, css, javascript, xml).
         */
        function setEditorContent(promptId, content, mode) {
            if (editors[promptId]) {
                editors[promptId].setOption('mode', mode);
                editors[promptId].setValue(content);
            } else {
                console.warn(`Éditeur non trouvé pour le promptId: ${promptId}`);
                //Optionnel: Afficher une erreur a l'utilisateur si l'éditeur n'existe pas.
            }
        }

        /**
         * Active l'onglet correspondant au mode de l'éditeur.
         * @param {string} promptId L'identifiant du prompt.
         * @param {string} mode Le mode de l'éditeur (twig, css, javascript, xml).
         */
        function setActiveTab(promptId, mode) {
            const tabsContainer = document.querySelector(`.tabs[data-prompt-id="${promptId}"]`); //Sélection du container des tabs avec le promptId

            if(tabsContainer){
                tabsContainer.querySelectorAll('.tab-btn').forEach(tab => {
                    tab.classList.remove('active');
                    if (tab.dataset.file === mode) {
                        tab.classList.add('active');
                    }
                });
            }
            else{
                console.warn(`Container d'onglets non trouvé pour le promptId: ${promptId}`);
                //Optionnel: Afficher une erreur a l'utilisateur si le container n'existe pas.
            }
        }

        // --- Polling du statut ---
        async function pollPromptStatus(promptId) {
            try {
                const response = await fetch(`/prompt/${promptId}`);

                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }

                const data = await response.json();

                if (data.status === 'completed') {
                    window.location.reload();
                } else if (data.status === 'error') {
                    showError(data.error || 'Une erreur est survenue lors de la génération');
                } else {
                    setTimeout(() => pollPromptStatus(promptId), 2000);
                }
            } catch (error) {
                showError(error.message || 'Erreur lors du suivi du statut');
            }
        }

        // --- Validation du nom de domaine et gestion des boutons de déploiement ---
        function isValidDomain(domain) {
            const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$/;
            return domainRegex.test(domain);
        }

        function updateDeployButton(inputElement, extensionSelect) {
            const deployBtn = inputElement.closest('.flex-col').querySelector('.deploy-btn');
            const domain = inputElement.value.trim();
            const domainPreview = deployBtn.querySelector('.domain-preview');
            const fullDomain = domain + extensionSelect.value;
            domainPreview.textContent = fullDomain;
            const isValid = isValidDomain(domain);  //Variable pour stocker la validité du domaine
            deployBtn.disabled = !isValid;
            deployBtn.classList.toggle('opacity-50', !isValid);
            deployBtn.classList.toggle('cursor-not-allowed', !isValid);
        }

        document.querySelectorAll('.custom-domain-input').forEach(input => {
            const extensionSelect = input.nextElementSibling;
            const deployBtn = input.closest('.flex-col').querySelector('.deploy-btn');

            const updateButtonState = () => updateDeployButton(input, extensionSelect); // Fonction pour éviter la duplication de code

            input.addEventListener('input', updateButtonState);
            extensionSelect.addEventListener('change', updateButtonState);

            deployBtn.addEventListener('click', function(e) {
                e.preventDefault();
                const domainName = input.value.trim();
                const domainExtension = extensionSelect.value;
                const baseUrl = this.dataset.deployUrl.replace('/temp', '');
                const url = `${baseUrl}?domain_name=${encodeURIComponent(domainName)}&domain_extension=${encodeURIComponent(domainExtension)}`;
                window.location.href = url;
            });

            updateButtonState(); // Initialiser l'état du bouton
        });


        // --- Initialisation des éditeurs CodeMirror ---
        document.querySelectorAll('.editor-container').forEach(container => {
            const promptId = container.dataset.promptId;
            const editor = CodeMirror(container, {
                mode: 'xml',
                theme: 'monokai',
                lineNumbers: true,
                autoCloseTags: true,
                autoCloseBrackets: true,
                matchBrackets: true,
                indentUnit: 4,
                lineWrapping: true,
                readOnly: false
            });

            editors[promptId] = editor; // Stockage de l'instance de CodeMirror

            editor.on('change', () => handleEditorChange(promptId)); // Simplification de l'appel de fonction
        });


        // --- Gestion des changements dans l'éditeur avec mise à jour en temps réel ---
        function handleEditorChange(promptId) {
            const editor = editors[promptId];
            if (!editor) {
                console.warn(`Éditeur non trouvé pour le promptId: ${promptId}`);
                return;
            }

            const fileType = editor.getOption('mode');
            const content = editor.getValue();

            let fileName;
            switch (fileType) {
                case 'xml':
                    fileName = 'index.html.twig';
                    break;
                case 'css':
                    fileName = 'styles.css';
                    break;
                case 'javascript':
                    fileName = 'script.js';
                    break;
                default:
                    fileName = 'index.html.twig';
                    break;
            }

            if (!currentFiles[promptId]) {
                currentFiles[promptId] = {};
            }

            currentFiles[promptId][fileName] = content;

            if (fileType === 'xml') {
                updatePreview(promptId, content);
            } else {
                updatePreview(promptId, currentFiles[promptId]['index.html.twig'] || '');
            }
        }

        // --- Chargement initial du contenu des fichiers et de l'aperçu ---
        Object.keys(editors).forEach(promptId => {
            fetch(`/prompt/${promptId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.files) {
                        throw new Error('Aucun fichier disponible');
                    }
                    currentFiles[promptId] = data.files;
                    
                    // Vérifier si index.html.twig existe, sinon utiliser index.html
                    const defaultFile = data.files['index.html.twig'] ? 'index.html.twig' : 'index.html';
                    const htmlContent = data.files[defaultFile] || '';
                    
                    setEditorContent(promptId, htmlContent, 'xml');
                    updatePreview(promptId, defaultFile);
                })
                .catch(error => {
                    console.error(`Erreur lors du chargement initial du prompt ${promptId}:`, error);
                    showError(`Erreur lors du chargement initial: ${error.message}`);
                    location.reload();
                });
        });

        // --- Gestion des onglets ---
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const promptId = this.dataset.promptId;
                const fileType = this.dataset.file;

                const tabsContainer = this.closest('.tabs');
                tabsContainer.querySelectorAll('.tab-btn').forEach(tab => tab.classList.remove('active'));
                this.classList.add('active');

                let fileName;
                let mode;
                switch (fileType) {
                    case 'html':
                        fileName = 'index.html.twig';
                        mode = 'xml';
                        break;
                    case 'css':
                        fileName = 'styles.css';
                        mode = 'css';
                        break;
                    case 'javascript':
                        fileName = 'script.js';
                        mode = 'javascript';
                        break;
                    default:
                        fileName = 'index.html.twig';
                        mode = 'xml';
                        break;
                }

                setEditorContent(promptId, currentFiles[promptId][fileName] || '', mode);

                // Mettre à jour l'aperçu uniquement si c'est un fichier .html.twig
                if (fileName.endsWith('.html.twig')) {
                    updatePreview(promptId, fileName);
                } else if (currentFiles[promptId]['index.html.twig']) {
                    // Sinon, garder l'aperçu du fichier index.html.twig
                    updatePreview(promptId, 'index.html.twig');
                }
            });
        });

        // --- Mise à jour de l'aperçu en temps réel avec gestion des dépendances ---
        function updatePreview(promptId, filePath) {
            const iframe = document.querySelector(`.preview-frame[data-prompt-id="${promptId}"]`);
            if (!iframe) {
                console.warn(`Iframe de prévisualisation non trouvé pour le promptId: ${promptId}`);
                return;
            }

            // Déterminer le contenu à afficher
            let htmlContent;
            if (filePath) {
                // Si un fichier est spécifié, utiliser son contenu
                htmlContent = currentFiles[promptId][filePath] || '';
                // Si le fichier modifié est un CSS ou JS, mettre à jour le HTML principal
                if (filePath.endsWith('.css') || filePath.endsWith('.js')) {
                    htmlContent = currentFiles[promptId]['index.html.twig'] || '';
                }
            } else {
                // Par défaut, utiliser index.html.twig
                htmlContent = currentFiles[promptId]['index.html.twig'] || '';
            }

            // Créer et afficher le blob
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const blobUrl = URL.createObjectURL(blob);
            // iframe.src = blobUrl;
            // iframe.onload = () => URL.revokeObjectURL(blobUrl);
        }

        // --- Téléchargement ---
        document.querySelectorAll('.download-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const promptId = this.dataset.promptId;
                const files = currentFiles[promptId];

                try {
                    const zip = new JSZip();
                    for (const [filename, content] of Object.entries(files)) {
                        zip.file(filename, content);
                    }

                    const blob = await zip.generateAsync({
                        type: 'blob'
                    });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `site-${promptId}.zip`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                } catch (error) {
                    console.error("Erreur lors de la création ou du téléchargement du fichier ZIP:", error);
                    showError("Erreur lors du téléchargement du fichier ZIP.");
                }
            });
        });

        // --- Déploiement ---
        document.querySelectorAll('.deploy-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const promptId = this.dataset.promptId;
                const customDomain = document.querySelector(`.custom-domain-input[data-prompt-id="${promptId}"]`).value.trim();
                const domainExtension = document.querySelector('.domain-extension').value;

                try {
                    this.disabled = true;
                    const originalText = this.innerHTML;
                    this.innerHTML = '<span class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Déploiement en cours...</span>';

                    const response = await fetch(`/deploy/${promptId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            domain_name: customDomain,
                            domain_extension: domainExtension
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        window.location.href = result.redirect_url;
                    } else {
                        throw new Error(result.error || 'Une erreur est survenue lors du déploiement');
                    }
                } catch (error) {
                    console.error('Erreur de déploiement:', error);
                    showError(error.message || 'Une erreur est survenue lors du déploiement');
                    this.innerHTML = originalText;
                    this.disabled = false;
                }
            });
        });

        // --- Restauration de version ---
        document.querySelectorAll('.restore-version-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const versionId = this.dataset.versionId;
                const originalText = this.innerHTML;

                try {
                    this.disabled = true;
                    this.innerHTML = `
                        <span class="inline-flex items-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-700 dark:text-blue-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Restauration en cours...
                        </span>
                    `;

                    const response = await fetch(`/restore/${versionId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const data = await response.json();
                    if (response.ok && data.success) {
                        location.reload();
                    } else {
                        throw new Error(data.error || 'Une erreur est survenue lors de la restauration');
                    }
                } catch (error) {
                    console.error('Erreur de restauration:', error);
                    showError(error.message || 'Une erreur est survenue lors de la restauration');
                    this.innerHTML = originalText;
                } finally {
                    this.disabled = false;
                    location.reload();
                }
            });
        });

        // --- Redéploiement ---
        document.querySelectorAll('.redeploy-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const promptId = this.dataset.promptId;
                const deployUrl = this.dataset.deployUrl;

                try {
                    this.disabled = true;
                    const originalText = this.innerHTML;
                    this.innerHTML = '<span class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Redéploiement en cours...</span>';

                    const response = await fetch(deployUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        window.location.href = result.redirect_url;
                    } else {
                        throw new Error(result.error || 'Une erreur est survenue lors du redéploiement');
                    }
                } catch (error) {
                    console.error('Erreur de redéploiement:', error);
                    showError(error.message || 'Une erreur est survenue lors du redéploiement');
                    this.innerHTML = originalText;
                    this.disabled = false;
                }
            });
        });

        // --- Modification ---
        document.querySelectorAll('.modify-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const promptId = this.dataset.promptId;
                const textarea = document.querySelector(`.modification-prompt[data-prompt-id="${promptId}"]`);
                const content = textarea.value.trim();

                this.disabled = true;
                this.innerHTML = `
                    <span class="inline-flex items-center">
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Modification en cours...
                    </span>
                `;

                if (!content) {
                    showError('Veuillez décrire les modifications souhaitées');
                    return;
                }

                try {
                    const response = await fetch(`/modify/${promptId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `content=${encodeURIComponent(content)}`
                    });

                    const data = await response.json();
                    if (response.ok && data.success) {
                        location.reload();
                    } else {
                        throw new Error(data.error || 'Une erreur est survenue');
                    }
                } catch (error) {
                    showError('Erreur: ' + error.message);
                } finally {
                    this.disabled = false;
                    this.innerHTML = 'Appliquer les modifications';
                }
            });
        });

        // --- Gestion du plein écran pour l'éditeur ---
        document.querySelectorAll('.editor-fullscreen-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const container = this.closest('.bg-white').querySelector('.editor-container');
                const editor = editors[container.dataset.promptId];

                if (!document.fullscreenElement) {
                    container.requestFullscreen();
                } else {
                    document.exitFullscreen();
                }
            });
        });

        // --- Gestion du plein écran pour l'aperçu ---
        document.querySelectorAll('.preview-fullscreen-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const container = this.closest('.bg-white').querySelector('.preview-container');
                if (!document.fullscreenElement) {
                    container.requestFullscreen();
                } else {
                    document.exitFullscreen();
                }
            });
        });
    });
    </script>
{% endblock %}