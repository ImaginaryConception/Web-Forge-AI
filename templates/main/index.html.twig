{% extends 'base.html.twig' %}

{% block title %}Web Forge - Générateur de Sites Web par IA{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
{% endblock %}

{% block body %}
<div class="min-h-screen transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Web Forge</h1>
            <p class="text-lg text-gray-600 dark:text-gray-300">Générez votre site web en quelques secondes grâce à l'IA</p>
            {% if app.user %}
                <a href="{{ path('app_my_sites') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200 me-2">Mes sites générés</a>
                {# <a href="{{ path('app_clone') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Cloner un site</a> #}
            {% endif %}
        </div>
        {% if app.user %}
            <div class="max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
                {{ form_start(form, {'attr': {'id': 'prompt-form', 'class': 'space-y-4'}}) }}
                    <div class="mb-4">
                        {{ form_widget(form.content) }}
                    </div>
                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-200 flex items-center justify-center">
                        <span id="submit-text">Générer le site</span>
                        <span id="loading-spinner" class="hidden ml-3">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                {{ form_end(form) }}
            </div>

            <div id="error-alert" class="hidden max-w-3xl mx-auto mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <strong class="font-bold">Erreur!</strong>
                <span id="error-message" class="block sm:inline"></span>
            </div>

            <div id="success-section" class="hidden max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center">
                <div class="mb-8">
                    <svg class="mx-auto h-16 w-16 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                </div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Site Généré avec Succès !</h2>
                <p class="text-lg text-gray-600 dark:text-gray-300 mb-8">Votre site a été généré avec succès. Vous pouvez maintenant le consulter dans votre espace personnel.</p>
                <a href="{{ path('app_my_sites') }}" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition duration-200">Voir mes sites générés</a>
            </div>
        {% else %}
            <div class="text-center">
                <p class="text-gray-600 dark:text-gray-300 mb-6">Connectez-vous pour commencer à générer des sites web</p>
                <div class="space-x-4">
                    <a href="{{ path('app_login') }}" class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Se connecter</a>
                    <a href="{{ path('app_register') }}" class="inline-block bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">S'inscrire</a>
                </div>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('prompt-form');
            const resultSection = document.getElementById('result-section');
            const submitText = document.getElementById('submit-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            let currentFiles = {};

            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    submitText.classList.add('hidden');
                    loadingSpinner.classList.remove('hidden');

                    try {
                        const formData = new FormData(form);
                        const response = await fetch('{{ path("app_generate") }}', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });

                        const data = await response.json();
                        if (response.ok && data.success && data.data && data.data.id) {
                            // Affichage de la clé API masquée dans la console
                            if (data.maskedApiKey) {
                                console.log('Clé API utilisée (masquée):', data.maskedApiKey);
                            }
                            await checkStatus(data.data.id);
                        } else {
                            const errorAlert = document.getElementById('error-alert');
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = data.error || 'Une erreur est survenue lors de la génération';
                        errorAlert.classList.remove('hidden');
                        throw new Error(data.error || 'Une erreur est survenue lors de la génération');
                        }
                    } catch (error) {
                        alert('Erreur: ' + error.message);
                    } finally {
                        submitText.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                    }
                });
            }

            async function checkStatus(promptId, retryCount = 0, backoffDelay = 1000) {
                const maxRetries = 5;
                const maxBackoffDelay = 16000; // 16 secondes maximum
                const errorAlert = document.getElementById('error-alert');
                const errorMessage = document.getElementById('error-message');

                try {
                    const response = await fetch(`/prompt/${promptId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 429 && retryCount < maxRetries) {
                            const nextBackoffDelay = Math.min(backoffDelay * 2, maxBackoffDelay);
                            console.log(`Rate limit atteint, nouvelle tentative dans ${backoffDelay/1000} secondes...`);
                            await new Promise(resolve => setTimeout(resolve, backoffDelay));
                            return checkStatus(promptId, retryCount + 1, nextBackoffDelay);
                        }
                        throw new Error(`Veuillez réessayer.`);
                    }

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        throw new Error('La réponse n\'est pas au format JSON');
                    }

                    const data = await response.json();
                    
                    // Vérifier d'abord le statut d'erreur
                    if (data.status === 'error' || data.error) {
                        // Afficher l'erreur immédiatement
                        errorMessage.textContent = data.error || data.message || 'Une erreur est survenue lors de la génération';
                        errorAlert.classList.remove('hidden');
                        submitText.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                        // Arrêter la génération
                        return;
                    }
                    
                    // Traiter les autres statuts
                    if (data.status === 'completed' && data.files) {
                        errorAlert.classList.add('hidden');
                        displayResults(data.files);
                        return;
                    } else if (data.status === 'pending' || data.status === 'processing') {
                        // Vérification automatique toutes les secondes
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        return checkStatus(promptId, retryCount, backoffDelay);
                    }
                } catch (error) {
                    if (retryCount < maxRetries && (error.message.includes('500') || error.message.includes('429'))) {
                        const nextBackoffDelay = Math.min(backoffDelay * 2, maxBackoffDelay);
                        console.log(`Erreur ${error.message}, nouvelle tentative dans ${backoffDelay/1000} secondes...`);
                        await new Promise(resolve => setTimeout(resolve, backoffDelay));
                        return checkStatus(promptId, retryCount + 1, nextBackoffDelay);
                    }
                    console.error('Erreur lors de la vérification du statut:', error);
                    errorMessage.textContent = error.message;
                    errorAlert.classList.remove('hidden');
                    submitText.classList.remove('hidden');
                    loadingSpinner.classList.add('hidden');
                }
            }

            function displayResults(files) {
                // S'assurer que files est un objet JSON valide
                if (typeof files === 'string') {
                    try {
                        files = JSON.parse(files);
                    } catch (e) {
                        console.error('Erreur lors du parsing JSON:', e);
                        return;
                    }
                }

                // Afficher le message de succès
                const successSection = document.getElementById('success-section');
                successSection.classList.remove('hidden');

                // Masquer le formulaire
                const promptForm = document.getElementById('prompt-form');
                if (promptForm) {
                    promptForm.closest('.bg-white').classList.add('hidden');
                }

                // Fin de la fonction displayResults
            }

        });
    </script>
{% endblock %}