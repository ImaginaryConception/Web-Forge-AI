{% extends 'base.html.twig' %}

{% block title %}Ajouter une table{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="{{ asset('css/database.css') }}">
{% endblock %}

{% block page_title %}Ajouter une table{% endblock %}
{% block page_subtitle %}Base de données: {{ database.name }}{% endblock %}

{% block body %}
<div class="container">
    <div class="db-card">
        <div class="db-card-header">
            <h2>Nouvelle table</h2>
        </div>
        <div class="db-card-body">
            <div class="db-info-grid">
                <div class="db-info-item">
                    <i class="fas fa-database"></i>
                    <span>Base de données: {{ database.name }}</span>
                </div>
            </div>

            <form method="post" action="{{ path('app_database_add_table', {'id': database.id}) }}" class="db-form" id="tableForm">
                <div class="db-form-group">
                    <label for="table_name" class="db-form-label">Nom de la table</label>
                    <input type="text" id="table_name" name="table_name" class="db-form-input" required>
                    <div class="db-form-help">Le nom doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores</div>
                </div>

                <div class="db-section-header">
                    <h3>Champs</h3>
                    <button type="button" id="add_field" class="db-btn db-btn-sm db-btn-secondary db-btn-icon">
                        <i class="fas fa-plus"></i> Ajouter un champ
                    </button>
                </div>

                <div id="fields_container" class="db-fields-container">
                    <!-- Champ ID par défaut -->
                    <div class="db-field-item">
                        <div class="db-form-group">
                            <label class="db-form-label">Nom du champ</label>
                            <input type="text" name="fields[0][name]" value="id" class="db-form-input" readonly>
                            <div class="db-form-help">Champ ID obligatoire (non modifiable)</div>
                        </div>
                        <div class="db-form-group">
                            <label class="db-form-label">Type</label>
                            <select name="fields[0][type]" class="db-form-select" disabled>
                                <option value="integer" selected>Integer</option>
                            </select>
                            <div class="db-form-help">Type de données pour ce champ</div>
                        </div>
                        <div class="db-field-actions">
                            <!-- Pas d'action pour le champ ID -->
                        </div>
                    </div>
                </div>

                <div class="db-form-actions">
                    <a href="{{ path('app_database_show', {'id': database.id}) }}" class="db-btn db-btn-secondary db-btn-icon">
                        <i class="fas fa-arrow-left"></i> Retour
                    </a>
                    <button type="submit" class="db-btn db-btn-primary db-btn-icon">
                        <i class="fas fa-save"></i> Créer la table
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('tableForm');
        const fieldsContainer = document.getElementById('fields_container');
        const addFieldButton = document.getElementById('add_field');
        let fieldIndex = 1;

        // Fonction pour ajouter un nouveau champ
        addFieldButton.addEventListener('click', function() {
            const fieldItem = document.createElement('div');
            fieldItem.className = 'db-field-item';
            fieldItem.innerHTML = `
                <div class="db-form-group">
                    <label class="db-form-label">Nom du champ</label>
                    <input type="text" name="fields[${fieldIndex}][name]" class="db-form-input" required>
                    <div class="db-form-help">Le nom doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores</div>
                </div>
                <div class="db-form-group">
                    <label class="db-form-label">Type</label>
                    <select name="fields[${fieldIndex}][type]" class="db-form-select" required>
                        <option value="string">String</option>
                        <option value="text">Text</option>
                        <option value="integer">Integer</option>
                        <option value="float">Float</option>
                        <option value="boolean">Boolean</option>
                        <option value="date">Date</option>
                        <option value="datetime">DateTime</option>
                        <option value="time">Time</option>
                        <option value="email">Email</option>
                        <option value="url">URL</option>
                    </select>
                    <div class="db-form-help">Type de données pour ce champ</div>
                </div>
                <div class="db-field-actions">
                    <button type="button" class="db-btn db-btn-sm db-btn-danger db-btn-icon remove-field">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            fieldsContainer.appendChild(fieldItem);
            fieldIndex++;

            // Ajouter l'événement de suppression au nouveau bouton
            const removeButton = fieldItem.querySelector('.remove-field');
            removeButton.addEventListener('click', function() {
                fieldsContainer.removeChild(fieldItem);
            });
        });

        // Validation du formulaire
        form.addEventListener('submit', function(event) {
            let hasErrors = false;
            const tableNameInput = document.getElementById('table_name');
            const tableName = tableNameInput.value.trim();
            
            // Validation du nom de la table
            if (!validateTableName(tableName)) {
                event.preventDefault();
                tableNameInput.classList.add('db-form-input-error');
                const helpText = tableNameInput.nextElementSibling;
                helpText.textContent = 'Le nom de la table doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores';
                helpText.classList.add('db-form-help-error');
                hasErrors = true;
            } else {
                tableNameInput.classList.remove('db-form-input-error');
                const helpText = tableNameInput.nextElementSibling;
                helpText.textContent = 'Le nom doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores';
                helpText.classList.remove('db-form-help-error');
            }
            
            // Vérifier qu'il y a au moins un champ en plus de l'ID
            const fieldItems = fieldsContainer.querySelectorAll('.db-field-item');
            if (fieldItems.length <= 1) {
                event.preventDefault();
                addFieldButton.classList.add('db-btn-error');
                hasErrors = true;
                alert('Vous devez ajouter au moins un champ en plus de l\'ID');
            } else {
                addFieldButton.classList.remove('db-btn-error');
            }
            
            // Validation des noms de champs
            const fieldNameInputs = fieldsContainer.querySelectorAll('input[name^="fields["][name$="[name]"]');
            const fieldNames = new Set();
            fieldNames.add('id'); // Ajouter l'ID par défaut
            
            fieldNameInputs.forEach(function(input) {
                const fieldName = input.value.trim();
                
                if (fieldName !== 'id') { // Ignorer le champ ID par défaut
                    if (!validateFieldName(fieldName)) {
                        event.preventDefault();
                        input.classList.add('db-form-input-error');
                        const helpText = input.nextElementSibling;
                        helpText.textContent = 'Le nom du champ doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores';
                        helpText.classList.add('db-form-help-error');
                        hasErrors = true;
                    } else if (fieldNames.has(fieldName)) {
                        event.preventDefault();
                        input.classList.add('db-form-input-error');
                        const helpText = input.nextElementSibling;
                        helpText.textContent = 'Ce nom de champ existe déjà dans la table';
                        helpText.classList.add('db-form-help-error');
                        hasErrors = true;
                    } else {
                        input.classList.remove('db-form-input-error');
                        const helpText = input.nextElementSibling;
                        helpText.textContent = 'Le nom doit commencer par une lettre et ne contenir que des lettres, chiffres et underscores';
                        helpText.classList.remove('db-form-help-error');
                        fieldNames.add(fieldName);
                    }
                }
            });
            
            if (hasErrors) {
                event.preventDefault();
            }
        });
        
        function validateTableName(name) {
            const re = /^[a-zA-Z][a-zA-Z0-9_]*$/;
            return re.test(name);
        }
        
        function validateFieldName(name) {
            const re = /^[a-zA-Z][a-zA-Z0-9_]*$/;
            return re.test(name);
        }
    });
</script>
{% endblock %}