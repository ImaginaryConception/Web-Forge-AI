{% extends 'base.html.twig' %}

{% block title %}Web Forge - Générateur de Sites Web par IA{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
{% endblock %}

{% block body %}
<div class="min-h-screen transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Web Forge</h1>
            <p class="text-lg text-gray-600 dark:text-gray-300">Générez votre site web en quelques secondes grâce à l'IA</p>
            {% if app.user %}
                <a href="{{ path('app_my_sites') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200 me-2">Mes sites générés</a>
                {# <a href="{{ path('app_clone') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Cloner un site</a> #}
            {% endif %}
        </div>
        {% if app.user %}
            <div class="max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
                {{ form_start(form, {'attr': {'id': 'prompt-form', 'class': 'space-y-4'}}) }}
                    <div class="mb-4">
                        {{ form_widget(form.content) }}
                    </div>
                    <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-200 flex items-center justify-center">
                        <span id="submit-text">Générer le site</span>
                        <span id="loading-spinner" class="hidden ml-3">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                {{ form_end(form) }}
            </div>

            <div id="error-alert" class="hidden max-w-3xl mx-auto mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <strong class="font-bold">Erreur!</strong>
                <span id="error-message" class="block sm:inline"></span>
            </div>

            <div id="result-section" class="hidden max-w-5xl mx-auto">
                <div class="gap-6">
                    {# <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Code généré</h3>
                        <div class="flex justify-between items-center mb-4">
                            <div class="tabs flex space-x-4">
                                <button class="tab-btn active" data-file="html">HTML</button>
                                <button class="tab-btn" data-file="css">CSS</button>
                                <button class="tab-btn" data-file="js">JavaScript</button>
                                <button class="tab-btn" data-file="php">PHP</button>
                            </div>
                            <button id="editor-copy-btn" class="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                            </div>
                            <button id="editor-fullscreen-btn" class="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                </svg>
                            </button>
                        </div>
                        <div id="editor-container" class="h-96 relative"></div>
                        <button id="download-btn" class="mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-200">
                            Télécharger le site
                        </button>
                    </div> #}
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Aperçu en direct</h3>
                            <button id="preview-fullscreen-btn" class="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                </svg>
                            </button>
                        </div>
                        <div id="preview-container" class="h-96 w-full bg-white border rounded-lg overflow-hidden relative">
                            <iframe id="preview-frame" class="w-full h-full"></iframe>
                        </div>
                        <div class="mt-4">
                            {# <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Modifier le site</h4> #}
                            {# <textarea id="modification-prompt" class="w-full h-24 p-2 border rounded-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" placeholder="Décrivez les modifications que vous souhaitez apporter au site..."></textarea> #}
                            {# <button id="modify-btn" data-id="{{ prompt is not null ? prompt.id : '' }}" class="mt-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200">
                                Modifier avec IA
                            </button> #}
                            <a href="{{ path('app_my_sites') }}" id="modify-btn" class="mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200">
                                Modifier avec IA
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        {% else %}
            <div class="text-center">
                <p class="text-gray-600 dark:text-gray-300 mb-6">Connectez-vous pour commencer à générer des sites web</p>
                <div class="space-x-4">
                    <a href="{{ path('app_login') }}" class="inline-block bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Se connecter</a>
                    <a href="{{ path('app_register') }}" class="inline-block bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">S'inscrire</a>
                </div>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/twig/twig.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('prompt-form');
            const resultSection = document.getElementById('result-section');
            const submitText = document.getElementById('submit-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            let editor;
            let currentFiles = {};

            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    submitText.classList.add('hidden');
                    loadingSpinner.classList.remove('hidden');

                    try {
                        const formData = new FormData(form);
                        const response = await fetch('{{ path("app_generate") }}', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });

                        const data = await response.json();
                        if (response.ok && data.success && data.data && data.data.id) {
                            // Affichage de la clé API masquée dans la console
                            if (data.maskedApiKey) {
                                console.log('Clé API utilisée (masquée):', data.maskedApiKey);
                            }
                            await checkStatus(data.data.id);
                        } else {
                            const errorAlert = document.getElementById('error-alert');
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = data.error || 'Une erreur est survenue lors de la génération';
                        errorAlert.classList.remove('hidden');
                        throw new Error(data.error || 'Une erreur est survenue lors de la génération');
                        }
                    } catch (error) {
                        alert('Erreur: ' + error.message);
                    } finally {
                        submitText.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                    }
                });
            }

            async function checkStatus(promptId, retryCount = 0, backoffDelay = 1000) {
                const maxRetries = 5;
                const maxBackoffDelay = 16000; // 16 secondes maximum
                const errorAlert = document.getElementById('error-alert');
                const errorMessage = document.getElementById('error-message');

                try {
                    const response = await fetch(`/prompt/${promptId}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 429 && retryCount < maxRetries) {
                            const nextBackoffDelay = Math.min(backoffDelay * 2, maxBackoffDelay);
                            console.log(`Rate limit atteint, nouvelle tentative dans ${backoffDelay/1000} secondes...`);
                            await new Promise(resolve => setTimeout(resolve, backoffDelay));
                            return checkStatus(promptId, retryCount + 1, nextBackoffDelay);
                        }
                        throw new Error(`Veuillez réessayer.`);
                    }

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        throw new Error('La réponse n\'est pas au format JSON');
                    }

                    const data = await response.json();
                    
                    // Vérifier d'abord le statut d'erreur
                    if (data.status === 'error' || data.error) {
                        // Afficher l'erreur immédiatement
                        errorMessage.textContent = data.error || data.message || 'Une erreur est survenue lors de la génération';
                        errorAlert.classList.remove('hidden');
                        submitText.classList.remove('hidden');
                        loadingSpinner.classList.add('hidden');
                        // Arrêter la génération
                        return;
                    }
                    
                    // Traiter les autres statuts
                    if (data.status === 'completed' && data.files) {
                        errorAlert.classList.add('hidden');
                        displayResults(data.files);
                        return;
                    } else if (data.status === 'pending' || data.status === 'processing') {
                        // Vérification automatique toutes les secondes
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        return checkStatus(promptId, retryCount, backoffDelay);
                    }
                } catch (error) {
                    if (retryCount < maxRetries && (error.message.includes('500') || error.message.includes('429'))) {
                        const nextBackoffDelay = Math.min(backoffDelay * 2, maxBackoffDelay);
                        console.log(`Erreur ${error.message}, nouvelle tentative dans ${backoffDelay/1000} secondes...`);
                        await new Promise(resolve => setTimeout(resolve, backoffDelay));
                        return checkStatus(promptId, retryCount + 1, nextBackoffDelay);
                    }
                    console.error('Erreur lors de la vérification du statut:', error);
                    errorMessage.textContent = error.message;
                    errorAlert.classList.remove('hidden');
                    submitText.classList.remove('hidden');
                    loadingSpinner.classList.add('hidden');
                }
            }

            function displayResults(files) {
                currentFiles = files;
                resultSection.classList.remove('hidden');

                if (!editor) {
                    editor = CodeMirror(document.getElementById('editor-container'), {
                        mode: 'xml',
                        theme: 'monokai',
                        lineNumbers: true,
                        readOnly: true
                    });
                }

                showFile('html');
                updatePreview();

                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.addEventListener('click', () => showFile(btn.dataset.file));
                });

                document.getElementById('download-btn').addEventListener('click', downloadFiles);

                // Gestion des modifications du site
                const modifyBtn = document.getElementById('modify-btn');
                const modificationPrompt = document.getElementById('modification-prompt');

                modifyBtn.addEventListener('click', async function() {
                    const modificationText = modificationPrompt.value.trim();
                    if (!modificationText) {
                        alert('Veuillez décrire les modifications souhaitées.');
                        return;
                    }

                    modifyBtn.disabled = true;
                    modifyBtn.innerHTML = `
                        <span class="inline-flex items-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Modification en cours...
                        </span>
                    `;

                    try {
                        const formData = new FormData();
                        formData.append('content', modificationText);

                        const promptId = modifyBtn.dataset.id;
                        const response = await fetch(`/modify/${promptId}`, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });

                        const data = await response.json();
                        if (response.ok && data.success && data.files) {
                            // Mettre à jour uniquement les fichiers modifiés avec ceux de la base de données
                            currentFiles = data.files;
                            displayResults(currentFiles);
                        } else if (data.data && data.data.id) {
                            await checkStatus(data.data.id);
                        } else {
                            throw new Error(data.error || 'Une erreur est survenue lors de la modification');
                        }
                    } catch (error) {
                        alert('Erreur: ' + error.message);
                    } finally {
                        modifyBtn.disabled = false;
                        modifyBtn.innerHTML = 'Appliquer les modifications';
                    }
                });
            }

            // Fonction pour basculer en mode plein écran
            function toggleFullScreen(element) {
                if (!document.fullscreenElement && !document.mozFullScreenElement &&
                    !document.webkitFullscreenElement && !document.msFullscreenElement) {
                    if (element.requestFullscreen) {
                        element.requestFullscreen();
                    } else if (element.msRequestFullscreen) {
                        element.msRequestFullscreen();
                    } else if (element.mozRequestFullScreen) {
                        element.mozRequestFullScreen();
                    } else if (element.webkitRequestFullscreen) {
                        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                    }
                } else {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.webkitExitFullscreen) {
                        document.webkitExitFullscreen();
                    }
                }
            }

            // Gestionnaires d'événements pour les boutons plein écran
            document.getElementById('editor-fullscreen-btn')?.addEventListener('click', () => {
                toggleFullScreen(document.getElementById('editor-container'));
            });

            document.getElementById('preview-fullscreen-btn')?.addEventListener('click', () => {
                toggleFullScreen(document.getElementById('preview-container'));
            });

            function showFile(type) {
                const fileMap = {
                    'html': 'index.html',
                    'css': 'styles.css',
                    'js': 'script.js'
                };

                const fileName = fileMap[type];
                const content = currentFiles[fileName] || '';

                // Nettoyer le conteneur de l'éditeur
                const container = document.getElementById('editor-container');
                container.innerHTML = '';

                // Supprimer l'ancien éditeur
                if (editor) {
                    editor.off('change');
                    editor = null;
                }

                // Créer un nouvel éditeur
                editor = CodeMirror(container, {
                    mode: type === 'html' ? 'xml' : type,
                    theme: 'monokai',
                    lineNumbers: true,
                    readOnly: false,
                    value: content
                });

                // Ajouter le nouvel écouteur d'événements
                editor.on('change', () => {
                    currentFiles[fileName] = editor.getValue();
                    updatePreview(); // Mettre à jour l'aperçu en direct lors des modifications
                });


                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.classList.toggle('active', btn.dataset.file === type);
                });
            }

            function updatePreview() {
                const preview = document.getElementById('preview-frame');
                if (!preview) return;

                try {
                    const doc = preview.contentDocument || preview.contentWindow.document;
                    doc.open();
                    doc.write(currentFiles['index.html'] || '');
                    doc.close();

                    // Attendre que le document soit chargé avant d'injecter les styles et scripts
                    const injectContent = () => {
                        try {
                            if (currentFiles['styles.css']) {
                                const style = doc.createElement('style');
                                style.textContent = currentFiles['styles.css'];
                                doc.head?.appendChild(style);
                            }

                            if (currentFiles['script.js']) {
                                const script = doc.createElement('script');
                                script.textContent = currentFiles['script.js'];
                                doc.body?.appendChild(script);
                            }
                        } catch (error) {
                            console.error('Erreur lors de l\'injection du contenu:', error);
                        }
                    };

                    // S'assurer que le document est complètement chargé
                    if (doc.readyState === 'complete') {
                        injectContent();
                    } else {
                        doc.addEventListener('DOMContentLoaded', injectContent);
                    }
                } catch (error) {
                    console.error('Erreur lors de la mise à jour de l\'aperçu:', error);
                }
            }

            async function downloadFiles() {
                const zip = new JSZip();
                Object.entries(currentFiles).forEach(([filename, content]) => {
                    zip.file(filename, content);
                });

                const blob = await zip.generateAsync({type: 'blob'});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'site-web.zip';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
        });
    </script>

    <style>
        .tab-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            color: #6b7280;
            background-color: transparent;
            transition: all 0.2s;
        }

        #editor-container:fullscreen,
        #editor-container:-webkit-full-screen,
        #editor-container:-moz-full-screen,
        #editor-container:-ms-fullscreen {
            padding: 1rem;
            background-color: #1e1e1e;
            width: 100vw;
            height: 100vh;
        }

        #preview-container:fullscreen,
        #preview-container:-webkit-full-screen,
        #preview-container:-moz-full-screen,
        #preview-container:-ms-fullscreen {
            padding: 0;
            background-color: white;
            width: 100vw;
            height: 100vh;
        }

        .tab-btn:hover {
            color: #3b82f6;
        }

        .tab-btn.active {
            color: white;
            background-color: #3b82f6;
        }

        .CodeMirror {
            height: 100%;
            font-family: 'Fira Code', monospace;
            border-radius: 0.375rem;
        }
    </style>
{% endblock %}