{% extends 'base.html.twig' %}

{% block title %}Mes Sites Web Générés - Web Forge{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.css">
    <style>
        .CodeMirror {
            height: 100%;
            font-family: 'Fira Code', monospace;
        }
        .file-btn.active {
            background-color: rgba(59, 130, 246, 0.1);
            border-left: 2px solid #3b82f6;
        }
        .dark .file-btn.active {
            background-color: rgba(59, 130, 246, 0.2);
        }
    </style>
{% endblock %}

{% block body %}
<div class="min-h-screen transition-colors duration-200">
    <div class="container mx-auto px-4 py-8">
        <div id="error-alert" class="hidden max-w-3xl mx-auto mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Erreur!</strong>
            <span id="error-message" class="block sm:inline"></span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
                <svg class="fill-current h-6 w-6 text-red-500" role="button" id="close-error" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <title>Fermer</title>
                    <path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/>
                </svg>
            </span>
        </div>
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">Mes Sites Web</h1>
            <p class="text-lg text-gray-600 dark:text-gray-300">Gérez vos sites web générés par Web Forge AI</p>
            {# <a href="{{ path('app_home') }}" class="inline-block mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Générer un nouveau site</a> #}
        </div>

        {% if prompts is empty %}
            <div class="text-center py-12">
                <p class="text-gray-600 dark:text-gray-300">Vous n'avez pas encore généré de sites web.</p>
                <a href="{{ path('app_home') }}" class="inline-block mt-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Commencer à générer</a>
            </div>
        {% else %}
            {% for prompt in prompts %}
                {% if prompt.status == 'completed' %}
                    <div class="max-w-5xl mx-auto mb-12 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <div class="mb-6">
                            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Site #{{ prompt.id }}</h2>
                            <div class="bg-gray-100 dark:bg-gray-700 rounded p-4 mb-4">
                                <h3 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">Prompt :</h3>
                                <p class="text-gray-600 dark:text-gray-400">{{ prompt.content }}</p>
                            </div>
                        </div>

                        <div class="mb-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Explorateur de fichiers</h3>
                                <div class="file-explorer overflow-y-auto h-64" data-prompt-id="{{ prompt.id }}">
                                    <div class="file-tree">
                                        {% set fileTypes = {
                                            'html.twig': 'Template',
                                            'css': 'Style',
                                            'js': 'Script',
                                            'json': 'Configuration',
                                            'md': 'Documentation'
                                        } %}

                                        {% for type, label in fileTypes %}
                                            {% set typeFiles = [] %}
                                            {% for template in templates %}
                                                {% if template.path ends with type %}
                                                    {% set typeFiles = typeFiles|merge([template]) %}
                                                {% endif %}
                                            {% endfor %}

                                            {% if typeFiles is not empty %}
                                                <div class="file-category mb-4">
                                                    <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                                                        <span class="mr-2">
                                                            {% if type == 'html.twig' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"></path></svg>
                                                            {% elseif type == 'css' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path></svg>
                                                            {% elseif type == 'js' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"></path></svg>
                                                            {% else %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>
                                                            {% endif %}
                                                        </span>
                                                        {{ label }}s
                                                    </h4>
                                                    <ul class="pl-4 space-y-1">
                                                        {% for file in typeFiles %}
                                                            <li>
                                                                <button class="file-btn text-left w-full px-2 py-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center group" 
                                                                        data-prompt-id="{{ prompt.id }}" 
                                                                        data-file-path="{{ file.path }}">
                                                                    <span class="flex-grow text-white truncate">{{ file.name }}</span>
                                                                    <span class="hidden group-hover:inline-flex ml-2 text-gray-500 dark:text-gray-400">
                                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                                        </svg>
                                                                    </span>
                                                                </button>
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Code généré</h3>
                                <div class="flex justify-end mb-4">
                                    <button class="editor-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="editor-container h-96 relative" data-prompt-id="{{ prompt.id }}"></div>
                                <div class="flex space-x-4 mt-4">
                                    <button class="download-btn bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                        Télécharger le site
                                    </button>
                                    <div class="flex flex-col space-y-2">
                                        {% if prompt.deployed %}
                                            <div class="flex space-x-4">
                                                <div class="text-green-600 dark:text-green-400 font-semibold py-2 px-4">
                                                    Site publié.
                                                </div>
                                                <button class="redeploy-btn bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}" data-deploy-url="{{ path('app_deploy_site', {'promptId': prompt.id, 'domain': prompt.domainName}) }}">
                                                    Redéployer le site
                                                </button>
                                            </div>
                                        {% else %}
                                            <div class="flex space-x-2">
                                                <input type="text" class="custom-domain-input flex-grow px-4 py-2 border rounded-l-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Votre nom de domaine">
                                                <select class="domain-extension px-4 py-2 border rounded-r-lg bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600">
                                                    <option value=".com">.com</option>
                                                    <option value=".fr">.fr</option>
                                                    <option value=".org">.org</option>
                                                    <option value=".net">.net</option>
                                                    <option value=".eu">.eu</option>
                                                </select>
                                            </div>
                                            <button class="deploy-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}" data-deploy-url="{{ path('app_deploy_site', {'promptId': prompt.id, 'domain': 'temp'}) }}" disabled>
                                                Publier le site sur <span class="domain-preview"></span>
                                            </button>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Aperçu en direct</h3>
                                    <button class="preview-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="preview-container h-96 w-full bg-white border rounded-lg overflow-hidden relative" data-prompt-id="{{ prompt.id }}">
                                    <iframe class="preview-frame w-full h-full" data-prompt-id="{{ prompt.id }}"></iframe>
                                </div>
                                <div class="mt-4">
                                    <div class="modification-section mb-6">
                                        <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Modifier le site</h4>
                                        <textarea class="modification-prompt w-full h-24 p-2 border rounded-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Décrivez les modifications que vous souhaitez apporter au site..."></textarea>
                                        <button class="modify-btn mt-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                            Appliquer les modifications
                                        </button>
                                    </div>
                                    <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Historique des versions</h4>
                                    <div class="versions-list space-y-2 mb-4 max-h-64 overflow-y-auto">
                                        {% set allVersions = [prompt] %}
                                        {% set currentPrompt = prompt %}
                                        {% if currentPrompt.originalPrompt is not null %}
                                            {% set originalPrompt = currentPrompt.originalPrompt %}
                                            {% set allVersions = allVersions|merge([originalPrompt]) %}
                                            {% if originalPrompt.originalPrompt is not null %}
                                                {% set allVersions = allVersions|merge([originalPrompt.originalPrompt]) %}
                                            {% endif %}
                                        {% endif %}

                                        {% for version in allVersions|reverse %}
                                            <div class="version-item p-3 bg-gray-50 dark:bg-gray-700 rounded-lg mb-2 {% if version.status == 'archived' %}opacity-75{% endif %}">
                                                <div class="flex justify-between items-start mb-2">
                                                    <div class="version-header">
                                                        {# <span class="font-medium text-lg">Version {{ version.version }}</span> #}
                                                        <span class="text-sm text-gray-500 dark:text-gray-400 ml-2">{{ version.createdAt|date('d/m/Y H:i') }}</span>
                                                        {% if version.status == 'archived' %}
                                                            <span class="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-xs rounded">Archivée</span>
                                                        {% elseif version.status == 'completed' %}
                                                            <span class="ml-2 px-2 py-1 bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-200 text-xs rounded">Version actuelle</span>
                                                        {% endif %}
                                                    </div>
                                                    {% if version.status == 'archived' and version.id != prompt.id %}
                                                        <form action="{{ path('app_restore_version', {'id': version.id}) }}" method="post" class="inline">
                                                            <button type="submit" class="restore-version-btn bg-blue-100 hover:bg-blue-200 dark:bg-blue-800 dark:hover:bg-blue-700 text-blue-700 dark:text-blue-200 px-3 py-1 rounded-full text-sm transition-colors duration-200">
                                                                Restaurer cette version
                                                            </button>
                                                        </form>
                                                    {% endif %}
                                                </div>
                                                
                                                {% if version.modificationRequest %}
                                                    <div class="version-content mt-2 p-2 bg-white dark:bg-gray-600 rounded">
                                                        <p class="text-sm text-gray-600 dark:text-gray-300">
                                                            <span class="font-medium">Modifications apportées :</span><br>
                                                            {{ version.modificationRequest }}
                                                        </p>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        {% else %}
                                            <p class="text-gray-500 dark:text-gray-400 text-sm">Aucune version disponible</p>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% elseif prompt.status == 'error' %}
                    <div class="max-w-5xl mx-auto mb-12 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <div class="mb-6">
                            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Site #{{ prompt.id }}</h2>
                            <div class="bg-gray-100 dark:bg-gray-700 rounded p-4 mb-4">
                                <h3 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">Prompt :</h3>
                                <p class="text-gray-600 dark:text-gray-400">{{ prompt.content }}</p>
                            </div>
                        </div>

                        <div class="mb-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Explorateur de fichiers</h3>
                                <div class="file-explorer overflow-y-auto h-64" data-prompt-id="{{ prompt.id }}">
                                    <div class="file-tree">
                                        {% set fileTypes = {
                                            'html.twig': 'Template',
                                            'css': 'Style',
                                            'js': 'Script',
                                            'json': 'Configuration',
                                            'md': 'Documentation'
                                        } %}
                                        
                                        {% for type, label in fileTypes %}
                                            {% set typeFiles = [] %}
                                            {% for template in templates %}
                                                {% if template.path ends with type %}
                                                    {% set typeFiles = typeFiles|merge([template]) %}
                                                {% endif %}
                                            {% endfor %}
                                            
                                            {% if typeFiles is not empty %}
                                                <div class="file-category mb-4">
                                                    <h4 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                                                        <span class="mr-2">
                                                            {% if type == 'html.twig' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"></path></svg>
                                                            {% elseif type == 'css' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path></svg>
                                                            {% elseif type == 'js' %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z"></path></svg>
                                                            {% else %}
                                                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path></svg>
                                                            {% endif %}
                                                        </span>
                                                        {{ label }}s
                                                    </h4>
                                                    <ul class="pl-4 space-y-1">
                                                        {% for file in typeFiles %}
                                                            <li>
                                                                <button class="file-btn text-left w-full px-2 py-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center group" 
                                                                        data-prompt-id="{{ prompt.id }}" 
                                                                        data-file-path="{{ file.path }}"
                                                                        
                                                                        >
                                                                    <span class="flex-grow text-white truncate">{{ file.name }}</span>
                                                                    <span class="hidden group-hover:inline-flex ml-2 text-gray-500 dark:text-gray-400">
                                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                                        </svg>
                                                                    </span>
                                                                </button>
                                                            </li>
                                                        {% endfor %}
                                                    </ul>
                                                </div>
                                            {% endif %}
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Code généré</h3>
                                <div class="flex justify-end mb-4">
                                    <button class="editor-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="editor-container h-96 relative" data-prompt-id="{{ prompt.id }}"></div>
                                <div class="flex space-x-4 mt-4">
                                    <button class="download-btn bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                        Télécharger le site
                                    </button>
                                    <div class="flex flex-col space-y-2">
                                        <div class="flex space-x-2">
                                            <input type="text" class="custom-domain-input flex-grow px-4 py-2 border rounded-l-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Votre nom de domaine">
                                            <select class="domain-extension px-4 py-2 border rounded-r-lg bg-white dark:bg-gray-700 dark:text-white dark:border-gray-600">
                                                <option value=".com">.com</option>
                                                <option value=".fr">.fr</option>
                                                <option value=".org">.org</option>
                                                <option value=".net">.net</option>
                                                <option value=".eu">.eu</option>
                                            </select>
                                        </div>
                                        <button class="deploy-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                            Publier le site
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                                <div class="flex justify-between items-center mb-4">
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Aperçu en direct</h3>
                                    <button class="preview-fullscreen-btn text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5h-4m4 0v4m0 0l-5-5m-7 11h4m-4 0v4m0-4l5 5m5-9v4m0-4h4m-4 0l5 5-5-5z" />
                                        </svg>
                                    </button>
                                </div>
                                <div class="preview-container h-96 w-full bg-white border rounded-lg overflow-hidden relative" data-prompt-id="{{ prompt.id }}">
                                    <iframe class="preview-frame w-full h-full" data-prompt-id="{{ prompt.id }}"></iframe>
                                </div>
                                <div class="mt-4">
                                    <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Historique des versions</h4>
                                    <div class="versions-list space-y-2 mb-4 max-h-64 overflow-y-auto">
                                        {% set allVersions = [prompt] %}
                                        {% set currentPrompt = prompt %}
                                        {% if currentPrompt.originalPrompt is not null %}
                                            {% set originalPrompt = currentPrompt.originalPrompt %}
                                            {% set allVersions = allVersions|merge([originalPrompt]) %}
                                            {% if originalPrompt.originalPrompt is not null %}
                                                {% set allVersions = allVersions|merge([originalPrompt.originalPrompt]) %}
                                            {% endif %}
                                        {% endif %}

                                        {% for version in allVersions|reverse %}
                                            <div class="version-item p-3 bg-gray-50 dark:bg-gray-700 rounded-lg mb-2 {% if version.status == 'archived' %}opacity-75{% endif %}">
                                                <div class="flex justify-between items-start mb-2">
                                                    <div class="version-header">
                                                        <span class="font-medium text-lg">Version {{ version.version }}</span>
                                                        <span class="text-sm text-gray-500 dark:text-gray-400 ml-2">{{ version.createdAt|date('d/m/Y H:i') }}</span>
                                                        {% if version.status == 'archived' %}
                                                            <span class="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-xs rounded">Archivée</span>
                                                        {% elseif version.status == 'completed' %}
                                                            <span class="ml-2 px-2 py-1 bg-green-100 dark:bg-green-800 text-green-700 dark:text-green-200 text-xs rounded">Version actuelle</span>
                                                        {% endif %}
                                                    </div>
                                                    {% if version.status == 'archived' and version.id != prompt.id %}
                                                        <form action="{{ path('app_restore_version', {'id': version.id}) }}" method="post" class="inline">
                                                            <button type="submit" class="restore-version-btn bg-blue-100 hover:bg-blue-200 dark:bg-blue-800 dark:hover:bg-blue-700 text-blue-700 dark:text-blue-200 px-3 py-1 rounded-full text-sm transition-colors duration-200">
                                                                Restaurer cette version
                                                            </button>
                                                        </form>
                                                    {% endif %}
                                                </div>
                                                
                                                {% if version.modificationRequest %}
                                                    <div class="version-content mt-2 p-2 bg-white dark:bg-gray-600 rounded">
                                                        <p class="text-sm text-gray-600 dark:text-gray-300">
                                                            <span class="font-medium">Modifications apportées :</span><br>
                                                            {{ version.modificationRequest }}
                                                        </p>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        {% else %}
                                            <p class="text-gray-500 dark:text-gray-400 text-sm">Aucune version disponible</p>
                                        {% endfor %}
                                    </div>
                                    <div class="modification-section">
                                        <h4 class="text-md font-semibold text-gray-900 dark:text-white mb-2">Modifier le site</h4>
                                        <textarea class="modification-prompt w-full h-24 p-2 border rounded-lg dark:bg-gray-700 dark:text-white dark:border-gray-600" data-prompt-id="{{ prompt.id }}" placeholder="Décrivez les modifications que vous souhaitez apporter au site..."></textarea>
                                        <button class="modify-btn mt-2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-200" data-prompt-id="{{ prompt.id }}">
                                            Appliquer les modifications
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="error-alert" class="max-w-3xl mx-auto mt-5 mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                            <strong class="font-bold">Erreur!</strong>
                            <span id="error-message" class="block sm:inline">Veuillez réessayer</span>
                        </div>
                    </div>
                {% endif %}
            {% endfor %}
        {% endif %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/markdown/markdown.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/foldgutter.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/brace-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/xml-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/markdown-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/fold/comment-fold.min.js"></script>
    <script src="/js/file-explorer.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Gestionnaire pour les boutons de fichiers
            document.querySelectorAll('.file-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    const filePath = this.dataset.filePath;
                    
                    try {
                        const response = await fetch(`/api/file-content/${promptId}?path=${encodeURIComponent(filePath)}`);
                        const data = await response.json();
                        
                        if (data.success) {
                            // Mettre à jour l'éditeur avec le contenu du fichier
                            const mode = filePath.endsWith('.twig') ? 'twig' : 
                                        filePath.endsWith('.css') ? 'css' : 
                                        filePath.endsWith('.js') ? 'javascript' : 'xml';
                            
                            editor.setOption('mode', mode);
                            editor.setValue(data.content);
                            
                            // Activer le bouton correspondant
                            document.querySelectorAll('.tab-btn').forEach(tab => {
                                tab.classList.remove('active');
                                if (tab.dataset.file === mode) {
                                    tab.classList.add('active');
                                }
                            });
                        }
                    } catch (error) {
                        console.error('Erreur lors du chargement du fichier:', error);
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Gestionnaire pour les boutons de restauration de version
            // Fonction pour afficher les messages d'erreur
            function showError(message) {
                const errorAlert = document.getElementById('error-alert');
                const errorMessage = document.getElementById('error-message');
                errorMessage.textContent = message;
                errorAlert.classList.remove('hidden');
                setTimeout(() => {
                    errorAlert.classList.add('hidden');
                }, 5000);
            }

            // Gestionnaire pour fermer l'alerte d'erreur
            document.getElementById('close-error')?.addEventListener('click', function() {
                document.getElementById('error-alert').classList.add('hidden');
            });

            document.querySelectorAll('.restore-version-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    const restoreUrl = this.dataset.restoreUrl;
                    const buttonText = this.textContent;
                    this.textContent = 'Restauration en cours...';
                    this.disabled = true;

                    try {
                        const response = await fetch(restoreUrl, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'Content-Type': 'application/json'
                            },
                            credentials: 'same-origin'
                        });

                        if (!response.ok) {
                            throw new Error(`Erreur HTTP: ${response.status}`);
                        }

                        const data = await response.json();
                        
                        if (data.success) {
                            window.location.reload();
                        } else {
                            throw new Error(data.message || 'Une erreur est survenue lors de la restauration');
                        }
                    } catch (error) {
                        showError(error.message || 'Une erreur est survenue lors de la restauration de la version');
                    } finally {
                        this.textContent = buttonText;
                        this.disabled = false;
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.success) {
                            // Recharger la page pour afficher la version restaurée
                            window.location.reload();
                        } else {
                            showError(data.error || 'Une erreur est survenue lors de la restauration de la version');
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        showError('Une erreur est survenue lors de la restauration de la version');
                    }
                });
            });

            // Gestionnaire pour fermer l'alerte d'erreur
            document.getElementById('close-error')?.addEventListener('click', function() {
                document.getElementById('error-alert').classList.add('hidden');
            });

            function showError(message) {
                const errorAlert = document.getElementById('error-alert');
                const errorMessage = document.getElementById('error-message');
                errorMessage.textContent = message;
                errorAlert.classList.remove('hidden');
            }

            // Fermeture de l'alerte d'erreur
            document.getElementById('close-error')?.addEventListener('click', function() {
                document.getElementById('error-alert').classList.add('hidden');
            });

            async function pollPromptStatus(promptId) {
                try {
                    const response = await fetch(`/prompt/${promptId}`);
                    const data = await response.json();

                    if (data.status === 'completed') {
                        window.location.reload();
                    } else if (data.status === 'error') {
                        showError(data.error || 'Une erreur est survenue lors de la génération');
                    } else {
                        setTimeout(() => pollPromptStatus(promptId), 2000);
                    }
                } catch (error) {
                    console.error('Erreur lors du polling:', error);
                    showError('Une erreur est survenue lors de la vérification du statut');
                }
            }
        });
    </script>
    <style>
        .tab-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            transition: all 0.2s;
        }
        
        .tab-btn.active {
            background-color: #4F46E5;
            color: white;
        }
        
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 9999;
            background: white;
            padding: 2rem;
        }

        .dark .fullscreen {
            background: #1F2937;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // La restauration des versions est maintenant gérée par des formulaires HTML standards

            // Fonction de validation du nom de domaine
            function isValidDomain(domain) {
                const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$/;
                return domainRegex.test(domain);
            }

            // Fonction pour mettre à jour l'état du bouton de publication
            function updateDeployButton(inputElement, extensionSelect) {
                const deployBtn = inputElement.closest('.flex-col').querySelector('.deploy-btn');
                const domain = inputElement.value.trim();
                const domainPreview = deployBtn.querySelector('.domain-preview');
                const fullDomain = domain + extensionSelect.value;
                domainPreview.textContent = fullDomain;
                deployBtn.disabled = !isValidDomain(domain);
                deployBtn.classList.toggle('opacity-50', !isValidDomain(domain));
                deployBtn.classList.toggle('cursor-not-allowed', !isValidDomain(domain));
            }

            // Gestionnaire d'événements pour les champs de domaine et boutons de déploiement
            document.querySelectorAll('.custom-domain-input').forEach(input => {
                const extensionSelect = input.nextElementSibling;
                const deployBtn = input.closest('.flex-col').querySelector('.deploy-btn');

                input.addEventListener('input', () => updateDeployButton(input, extensionSelect));
                extensionSelect.addEventListener('change', () => updateDeployButton(input, extensionSelect));
                
                // Gestionnaire de clic pour le bouton de déploiement
                deployBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const domainName = input.value.trim();
                    const domainExtension = extensionSelect.value;
                    const baseUrl = this.dataset.deployUrl.replace('/temp', '');
                    const url = `${baseUrl}?domain_name=${encodeURIComponent(domainName)}&domain_extension=${encodeURIComponent(domainExtension)}`;
                    window.location.href = url;
                });

                // Initialiser l'état du bouton
                updateDeployButton(input, extensionSelect);
            });

            const editors = {};
            const currentFiles = {};

            // Initialiser les éditeurs pour chaque prompt
            document.querySelectorAll('.editor-container').forEach(container => {
                const promptId = container.dataset.promptId;
                editors[promptId] = CodeMirror(container, {
                    mode: 'xml',
                    theme: 'monokai',
                    lineNumbers: true,
                    autoCloseTags: true,
                    autoCloseBrackets: true,
                    matchBrackets: true,
                    indentUnit: 4,
                    lineWrapping: true,
                    readOnly: false
                });

                // Ajouter un gestionnaire d'événements pour les modifications du code
                editors[promptId].on('change', function(editor) {
                    const fileType = editor.getOption('mode');
                    const content = editor.getValue();
                    
                    // Mettre à jour le contenu du fichier actuel
                    const fileName = fileType === 'xml' ? 'index.html' :
                                    fileType === 'css' ? 'styles.css' : 'script.js';
                    currentFiles[promptId][fileName] = content;
                    
                    // Mettre à jour l'aperçu si nécessaire
                    if (fileType === 'xml') {
                        updatePreview(promptId, content);
                    } else {
                        updatePreview(promptId, currentFiles[promptId]['index.html'] || '');
                    }
                });

                // Charger le contenu initial
                fetch(`/prompt/${promptId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.files) {
                            currentFiles[promptId] = data.files;
                            const htmlContent = data.files['index.html'] || '';
                            editors[promptId].setValue(htmlContent);
                            updatePreview(promptId, htmlContent);
                        }
                    });
            });

            // Gestionnaire d'onglets
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const promptId = this.dataset.promptId;
                    const fileType = this.dataset.file;
                    const tabsContainer = this.closest('.tabs');
                    
                    tabsContainer.querySelectorAll('.tab-btn').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    this.classList.add('active');

                    const fileName = fileType === 'html' ? 'index.html' :
                                fileType === 'css' ? 'styles.css' : 'script.js';
                    const mode = fileType === 'html' ? 'xml' : fileType;
                    
                    editors[promptId].setOption('mode', mode);
                    editors[promptId].setValue(currentFiles[promptId][fileName] || '');
                    
                    // Mettre à jour l'aperçu avec le nouveau contenu
                    if (fileType === 'html') {
                        updatePreview(promptId, currentFiles[promptId][fileName] || '');
                    } else {
                        updatePreview(promptId, currentFiles[promptId]['index.html'] || '');
                    }
                });
            });

            // Fonction de mise à jour de l'aperçu
            function updatePreview(promptId, htmlContent) {
                const iframe = document.querySelector(`.preview-frame[data-prompt-id="${promptId}"]`);
                const cssContent = currentFiles[promptId]['styles.css'] || '';
                const jsContent = currentFiles[promptId]['script.js'] || '';
                
                // Créer le contenu HTML complet avec CSS et JavaScript intégrés
                const fullContent = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <style>${cssContent}</style>
                    </head>
                    <body>
                        ${htmlContent}
                    </body>
                    </html>
                `;
                
                // Mettre à jour le contenu de l'iframe de manière sécurisée
                const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                iframeDoc.open();
                iframeDoc.write(fullContent);
                iframeDoc.close();
            }

            // Gestionnaire de déploiement
            document.querySelectorAll('.deploy-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    const customDomain = document.querySelector(`.custom-domain-input[data-prompt-id="${promptId}"]`).value.trim();
                    const files = currentFiles[promptId];
                    
                    try {
                        const response = await fetch('/deploy', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                promptId,
                                files,
                                customDomain
                            })
                        });
                        
                        if (!response.ok) {
                            throw new Error('Erreur lors du déploiement');
                        }
                        
                        const result = await response.json();
                        // Afficher un message de succès ou rediriger vers le site déployé
                        window.location.href = result.deployedUrl;
                    } catch (error) {
                        const errorAlert = document.getElementById('error-alert');
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = error.message;
                        errorAlert.classList.remove('hidden');
                    }
                });
            });

            // Gestionnaire de téléchargement
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    const files = currentFiles[promptId];
                    
                    const zip = new JSZip();
                    for (const [filename, content] of Object.entries(files)) {
                        zip.file(filename, content);
                    }
                    
                    const blob = await zip.generateAsync({type: 'blob'});
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `site-${promptId}.zip`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                });
            });

            // Gestionnaire de déploiement
            document.querySelectorAll('.deploy-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    
                    try {
                        // Désactiver le bouton et afficher le chargement
                        this.disabled = true;
                        const originalText = this.innerHTML;
                        this.innerHTML = '<span class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042s(`/deploy/${promptId}`, {
                            method: 'POST',
             eplo           headers: {
                                'Content-Type': 'application/json',
          ();
                        
                        if (resujse  r lmessage de succès
         }lert = document.createElement            successAlert.c-green-100 border border-gc0e rdela      <span class="block sm:ine">Le site a été déplyccès. URL: <a href="${resultef     hN/Supprieaprès 5 secondes
                            setTimeout(() => {
                                successAlert.remove();
                            }, 5000);
                        } else {
                            throw new Error(result.error || 'Une erreur est survenue lors du déploiement');
                        }
                    } catch (error) {
                        // Afficher l'erreur
                        const errorAlert = document.querySelector('#error-alert');
                        const errorMessage = document.querySelector('#error-message');
                        errorMessage.textContent = error.message;
                        errorAlert.classList.remove('hidden');
                        
                        // Masquer l'erreur après 5 secondes
                        setTimeout(() => {
                            errorAlert.classList.add('hidden');
                        }, 5000);
                    } finally {
                        // Réactiver le bouton et restaurer le texte original
                        this.disabled = false;
                        this.innerHTML = 'Publier le site';
                    }
                });
            });

            // Gestionnaire de modifications
            document.querySelectorAll('.modify-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const promptId = this.dataset.promptId;
                    const textarea = document.querySelector(`.modification-prompt[data-prompt-id="${promptId}"]`);
                    const content = textarea.value.trim();
                    
                    // Désactiver le bouton et afficher le spinner
                    this.disabled = true;
                    this.innerHTML = `
                        <span class="inline-flex items-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Modification en cours...
                        </span>
                    `;

                    if (!content) {
                        showError('Veuillez décrire les modifications souhaitées');
                        return;
                    }

                    try {
                        const response = await fetch(`/modify/${promptId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: `content=${encodeURIComponent(content)}`
                        });

                        const data = await response.json();
                        if (response.ok && data.success) {
                            location.reload();
                        } else {
                            throw new Error(data.error || 'Une erreur est survenue');
                        }
                    } catch (error) {
                        showError('Erreur: ' + error.message);
                    } finally {
                        // Réactiver le bouton et restaurer son texte original
                        this.disabled = false;
                        this.innerHTML = 'Appliquer les modifications';
                    }
                });
            });

            // Gestionnaire de plein écran pour l'éditeur
            document.querySelectorAll('.editor-fullscreen-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const container = this.closest('.bg-white').querySelector('.editor-container');
                    const editor = editors[container.dataset.promptId];
                    
                    if (!document.fullscreenElement) {
                        container.requestFullscreen().then(() => {
                            container.style.height = '90vh';
                            editor.setSize(null, '90vh');
                            editor.refresh();
                        });
                    } else {
                        document.exitFullscreen().then(() => {
                            container.style.height = '24rem';
                            editor.setSize(null, '24rem');
                            editor.refresh();
                        });
                    }
                });
            });

            // Gestionnaire de plein écran pour l'aperçu
            document.querySelectorAll('.preview-fullscreen-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const container = this.closest('.bg-white').querySelector('.preview-container');
                    if (!document.fullscreenElement) {
                        container.requestFullscreen();
                    } else {
                        document.exitFullscreen();
                    }
                });
            });

            // Gestionnaire pour fermer l'alerte d'erreur
            document.getElementById('close-error')?.addEventListener('click', function() {
                document.getElementById('error-alert').classList.add('hidden');
            });

            // Fonction pour afficher les erreurs
            function showError(message) {
                const errorAlert = document.getElementById('error-alert');
                const errorMessage = document.getElementById('error-message');
                errorMessage.textContent = message;
                errorAlert.classList.remove('hidden');
            }
        });
    </script>
{% endblock %}